// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/alwi09/entity"
	mock "github.com/stretchr/testify/mock"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: todo
func (_m *TodoRepository) Create(todo *entity.Todo) (*entity.Todo, error) {
	ret := _m.Called(todo)

	var r0 *entity.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Todo) (*entity.Todo, error)); ok {
		return rf(todo)
	}
	if rf, ok := ret.Get(0).(func(*entity.Todo) *entity.Todo); ok {
		r0 = rf(todo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Todo) error); ok {
		r1 = rf(todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *TodoRepository) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *TodoRepository) FindAll() (*[]entity.Todo, error) {
	ret := _m.Called()

	var r0 *[]entity.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]entity.Todo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]entity.Todo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *TodoRepository) FindById(id string) (*entity.Todo, error) {
	ret := _m.Called(id)

	var r0 *entity.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Todo, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Todo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, todo
func (_m *TodoRepository) Update(id string, todo *entity.Todo) (*entity.Todo, error) {
	ret := _m.Called(id, todo)

	var r0 *entity.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *entity.Todo) (*entity.Todo, error)); ok {
		return rf(id, todo)
	}
	if rf, ok := ret.Get(0).(func(string, *entity.Todo) *entity.Todo); ok {
		r0 = rf(id, todo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *entity.Todo) error); ok {
		r1 = rf(id, todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTodoRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTodoRepository creates a new instance of TodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTodoRepository(t mockConstructorTestingTNewTodoRepository) *TodoRepository {
	mock := &TodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
