// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	request "github.com/alwi09/dto/request"
	mock "github.com/stretchr/testify/mock"

	response "github.com/alwi09/dto/response"
)

// TodoService is an autogenerated mock type for the TodoService type
type TodoService struct {
	mock.Mock
}

// Create provides a mock function with given fields: todoReq
func (_m *TodoService) Create(todoReq *request.TodoCreateRequest) (*response.TodoResponse, error) {
	ret := _m.Called(todoReq)

	var r0 *response.TodoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*request.TodoCreateRequest) (*response.TodoResponse, error)); ok {
		return rf(todoReq)
	}
	if rf, ok := ret.Get(0).(func(*request.TodoCreateRequest) *response.TodoResponse); ok {
		r0 = rf(todoReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.TodoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*request.TodoCreateRequest) error); ok {
		r1 = rf(todoReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *TodoService) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *TodoService) FindAll() (*[]response.TodoResponse, error) {
	ret := _m.Called()

	var r0 *[]response.TodoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]response.TodoResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]response.TodoResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]response.TodoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *TodoService) FindById(id string) (*response.TodoResponse, error) {
	ret := _m.Called(id)

	var r0 *response.TodoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*response.TodoResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *response.TodoResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.TodoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, todoReq
func (_m *TodoService) Update(id string, todoReq *request.TodoUpdateRequest) (*response.TodoResponse, error) {
	ret := _m.Called(id, todoReq)

	var r0 *response.TodoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *request.TodoUpdateRequest) (*response.TodoResponse, error)); ok {
		return rf(id, todoReq)
	}
	if rf, ok := ret.Get(0).(func(string, *request.TodoUpdateRequest) *response.TodoResponse); ok {
		r0 = rf(id, todoReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.TodoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *request.TodoUpdateRequest) error); ok {
		r1 = rf(id, todoReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTodoService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTodoService creates a new instance of TodoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTodoService(t mockConstructorTestingTNewTodoService) *TodoService {
	mock := &TodoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
