// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	request "github.com/alwiirfan/internal/dto/request"
	mock "github.com/stretchr/testify/mock"

	response "github.com/alwiirfan/internal/dto/response"
)

// BookService is an autogenerated mock type for the BookService type
type BookService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *BookService) Create(ctx context.Context, req *request.CreateBookRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.CreateBookRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAll provides a mock function with given fields: ctx
func (_m *BookService) DeleteAll(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *BookService) DeleteByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, page, pageSize
func (_m *BookService) FindAll(ctx context.Context, page int, pageSize int) ([]*response.BookResponse, int, error) {
	ret := _m.Called(ctx, page, pageSize)

	var r0 []*response.BookResponse
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*response.BookResponse, int, error)); ok {
		return rf(ctx, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*response.BookResponse); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*response.BookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindAllSearch provides a mock function with given fields: ctx, page, pageSize, req
func (_m *BookService) FindAllSearch(ctx context.Context, page int, pageSize int, req *request.SearchBookRequest) ([]*response.BookResponse, int, error) {
	ret := _m.Called(ctx, page, pageSize, req)

	var r0 []*response.BookResponse
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *request.SearchBookRequest) ([]*response.BookResponse, int, error)); ok {
		return rf(ctx, page, pageSize, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *request.SearchBookRequest) []*response.BookResponse); ok {
		r0 = rf(ctx, page, pageSize, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*response.BookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *request.SearchBookRequest) int); ok {
		r1 = rf(ctx, page, pageSize, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, *request.SearchBookRequest) error); ok {
		r2 = rf(ctx, page, pageSize, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *BookService) FindByID(ctx context.Context, id string) (*response.BookResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 *response.BookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*response.BookResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *response.BookResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.BookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByISBN provides a mock function with given fields: ctx, isbn
func (_m *BookService) FindByISBN(ctx context.Context, isbn string) (*response.BookResponse, error) {
	ret := _m.Called(ctx, isbn)

	var r0 *response.BookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*response.BookResponse, error)); ok {
		return rf(ctx, isbn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *response.BookResponse); ok {
		r0 = rf(ctx, isbn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.BookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, isbn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, req
func (_m *BookService) Update(ctx context.Context, id string, req *request.UpdateBookRequest) error {
	ret := _m.Called(ctx, id, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *request.UpdateBookRequest) error); ok {
		r0 = rf(ctx, id, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBookService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookService creates a new instance of BookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookService(t mockConstructorTestingTNewBookService) *BookService {
	mock := &BookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
